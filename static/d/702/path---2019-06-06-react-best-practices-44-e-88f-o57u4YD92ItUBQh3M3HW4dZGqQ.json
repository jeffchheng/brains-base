{"data":{"site":{"siteMetadata":{"title":"brain's base","author":"Jeff Chheng"}},"markdownRemark":{"id":"9feda24c-aa96-58de-83ee-d10f38af8667","excerpt":"The DEFINITIVE guide to React and programming best practices.Just kidding. All code sucks in six months. So at best, I try to do future me some a favor by usingâ€¦","html":"<p>The DEFINITIVE guide to React and programming best practices.</p>\n<p>Just kidding. All code sucks in six months. So at best, I try to do future me some a favor by using the following guidelines:</p>\n<h2>Write dumb code</h2>\n<p>When future me comes back to old code, paradigms may have shifted. What was clever six months ago might be obtuse or bad practice now. So I try to keep my code as \"dumb\" as possible. I've flipped on using <code>Array#reduce</code> nowadays. Local mutation + <code>Array#forEach</code> is much easier to visually grok and understand.</p>\n<pre><code class=\"language-js\">const employees = [\n  { id: '1', name: 'Anakin', title: 'Jedi Knight' },\n  null,\n  { id: '2', name: 'Obi-Wan', title: 'Jedi Master' },\n  null,\n  { id: '3', name: 'Sidious', title: 'Sith Lord' },\n  null,\n  { id: '4', name: 'Maul', title: 'Apprentice' },\n];\n\nconst withReduce = employees.reduce((acc, curr) => curr ? ({ ...acc, [curr.id]: curr }), []);\n\nconst withForEach = {};\nemployees.forEach(x => {\n  if (!x) return;\n  withForEach[x.id] = x;\n});\n</code></pre>\n<h2>DRY is out, WET is in</h2>\n<p>Overabstraction is the bane of my existence. We spend so much time trying avoid typing the same thing twice when copy-paste would do the job. It's easier to recover from no abstraction than the wrong one. Who's to say you even found the right abstraction after two instances of repetition? I say copy-paste as much as you want until it causes bugs, and only abstract to solve bugs. And in doing so, ensure that you've reduced the developer overheard.</p>\n<h2>Location, location, location</h2>","frontmatter":{"title":"React best practices","date":"June 06, 2019","description":"The DEFINITIVE guide to React and programming best practices."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019-06-06-react-best-practices/","previous":{"fields":{"slug":"/2019-06-05-hello-world/"},"frontmatter":{"title":"Hello World"}},"next":{"fields":{"slug":"/2019-06-07-context-vs-redux/"},"frontmatter":{"title":"Hooks + Context vs. (React-)Redux"}}}}