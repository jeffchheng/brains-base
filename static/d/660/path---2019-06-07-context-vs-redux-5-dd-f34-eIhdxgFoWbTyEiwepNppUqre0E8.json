{"data":{"site":{"siteMetadata":{"title":"brain's base","author":"Jeff Chheng"}},"markdownRemark":{"id":"5acef7c8-4de1-5de0-8865-4c646b5ac113","excerpt":"With hooks, a lot of people are asking if Redux is dead. The answer is “no.”For an enterprise web app, I’d argue it’s probably a forgone conclusion it will be…","html":"<p>With hooks, a lot of people are asking if Redux is dead. <a href=\"https://blog.isquaredsoftware.com/2018/03/redux-not-dead-yet/\">The answer is “no.”</a></p>\n<p>For an enterprise web app, I’d argue it’s probably a forgone conclusion it will be used in <em>some</em> capacity, but it absolutely shouldn’t be used for everything, despite its great tooling and ecosystem. Time travel debugging and capturing your entire app state to send in a debug log are the two biggest arguments for production apps to use Redux. Users might not give reliable repro steps, so your action log becomes your repro steps. Users might not accurately describe what they see, or it might be hidden, so a state snapshot let’s you see what the data is saying.</p>\n<p>But these come with trade-offs that might not be readily apparent. Consider the boilerplate needed to create a reducers, actions/action creators, combining said reducers, connecting to the store, and using a higher-order component, and so on. Granted, there’s <a href=\"https://redux-starter-kit.js.org/introduction/quick-start\">Redux Starter Kit</a> nowadays.</p>","frontmatter":{"title":"Context vs. (React-)Redux","date":"June 07, 2019","description":"The battle of the century for developer mindshare!"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019-06-07-context-vs-redux/","previous":{"fields":{"slug":"/2019-06-06-react-best-practices/"},"frontmatter":{"title":"React best practices"}},"next":null}}