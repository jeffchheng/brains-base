{"data":{"site":{"siteMetadata":{"title":"brain's base","author":"Jeff Chheng"}},"markdownRemark":{"id":"5acef7c8-4de1-5de0-8865-4c646b5ac113","excerpt":"With hooks, a lot of people are asking if Redux is dead. The answer is “no.”For an enterprise web app, I’d argue it’s probably a forgone conclusion it will be…","html":"<p>With hooks, a lot of people are asking if Redux is dead. <a href=\"https://blog.isquaredsoftware.com/2018/03/redux-not-dead-yet/\">The answer is “no.”</a></p>\n<p>For an enterprise web app, I’d argue it’s probably a forgone conclusion it will be used in <em>some</em> capacity. Time travel debugging and capturing your entire app state to send in a debug log are the two biggest arguments for production apps to use Redux. Users might not give reliable repro steps, so your action log becomes your repro steps. Users might not accurately describe what they see, or it might be hidden, so a state snapshot let’s you inspect the data directly. It is also very testable, predictable, and so on. Despite these benefits, it absolutely shouldn’t be used for everything.</p>\n<p>Consider the boilerplate and developer overhead needed to create a reducers, actions/action creators, combining said reducers, connecting to the store, and using a higher-order component, and so on. Think about all the unit tests required to prove correctness. Granted, there’s <a href=\"https://redux-starter-kit.js.org/introduction/quick-start\">Redux Starter Kit</a> nowadays.</p>\n<p>This isn’t even to mention redux-thunk and additional middlewares. Middlewares are certainly elegant, but can be difficult to reason about like dream levels in <em>Inception</em>.</p>\n<h2>Here comes our lords and saviors, the Hooks and new Context API</h2>\n<p>Before hooks, I’d say the context API was super clunky to use and generally not worth it. <a href=\"https://reactjs.org/docs/context.html#consuming-multiple-contexts\">Consuming multiple contexts looked horrendous with render props.</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>ContextA<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span><span class=\"token parameter\">valueA</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ContextB<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token parameter\">valueB</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>Component valueA<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>valueA<span class=\"token punctuation\">}</span> valueB<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>valueB<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ContextB<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span>ContextA<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span></code></pre></div>\n<p><code class=\"language-text\">useContext</code> now makes it so ergonomic.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> valueA <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>ContextA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> valueB <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>ContextB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Just… <em>chef’s kiss</em>.</p>\n<p>Take this <code class=\"language-text\">useFetch</code> hook for example. Assume we’re only doing GETs for simplicity. (Using something else like PATCH may be indicative of a valid use for Redux: predictable and/or optimistic updating.)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useFetch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> shouldRun <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> shouldRun <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> shouldRun <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// When the URL changes or the component is unmounted,</span>\n    <span class=\"token comment\">// do not attempt to set state.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> shouldRun <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Hooks + Context implementation.</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> UhOh <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">UserWrapper</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token function\">useFetch</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">&amp;&amp;</span> <span class=\"token template-string\"><span class=\"token string\">`/api/v1/users/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// null means loading</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Loading<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// do some error checking</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>User<span class=\"token punctuation\">.</span>Provider value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>UhOh<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>User<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// or just block rendering</span>\n    <span class=\"token comment\">// return &lt;div>Something went wrong!&lt;/div>;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// render a provider + children</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>User<span class=\"token punctuation\">.</span>Provider value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>User<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Username</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user <span class=\"token operator\">===</span> UhOh<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>MissingData <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Given the above, we’re finally back to unidirectional data flow. <code class=\"language-text\">&lt;UserWrapper /&gt;</code> will load the data it’s responsible for and ensure it is available to use. Of course, you might not need context in this case. It can just be a prop you pass. But imagine having multiple pieces of data you just want to set and forget and how easy this becomes to use.</p>\n<p>This is in contrast to the Redux implementation that requires you to load to the data and set it in state. But children (or maybe adjacent nodes) can access the store before the data is there, so you’ll end up having to do a lot of defensive coding in your child components. You can attempt to recreate some of the same enforcements, but it ends up not being as granular or ergonomic.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"></code></pre></div>","frontmatter":{"title":"Hooks + Context vs. (React-)Redux","date":"June 07, 2019","description":"The battle of the century for developer mindshare!"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019-06-07-context-vs-redux/","previous":{"fields":{"slug":"/2019-06-06-react-best-practices/"},"frontmatter":{"title":"React best practices"}},"next":null}}