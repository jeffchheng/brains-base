{"data":{"site":{"siteMetadata":{"title":"brain's base","author":"Jeff Chheng"}},"markdownRemark":{"id":"9feda24c-aa96-58de-83ee-d10f38af8667","excerpt":"The DEFINITIVE guide to React and programming best practices.Just kidding. All code sucks in six months. So at best, I try to do future me some a favor by using…","html":"<p>The DEFINITIVE guide to React and programming best practices.</p>\n<p>Just kidding. All code sucks in six months. So at best, I try to do future me some a favor by using the following guidelines:</p>\n<h2>Write dumb code</h2>\n<p>When future me comes back to old code, paradigms may have shifted. What was clever six months ago might be obtuse or bad practice now. So I try to keep my code as “dumb” as possible. I’ve flipped on using <code class=\"language-text\">Array#reduce</code> nowadays. Local mutation + <code class=\"language-text\">Array#forEach</code> is much easier to visually grok and understand.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> employees <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Anakin'</span><span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">:</span> <span class=\"token string\">'Jedi Knight'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Obi-Wan'</span><span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">:</span> <span class=\"token string\">'Jedi Master'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Sidious'</span><span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">:</span> <span class=\"token string\">'Sith Lord'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token string\">'4'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Maul'</span><span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">:</span> <span class=\"token string\">'Apprentice'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> withReduce <span class=\"token operator\">=</span> employees<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> curr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> curr <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>acc<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>curr<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> curr <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> withForEach <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nemployees<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  withForEach<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>DRY is out, WET is in</h2>\n<p>Overabstraction is the bane of my existence. We spend so much time trying avoid typing the same thing twice when copy-paste would do the job. It’s easier to recover from no abstraction than the wrong one. Who’s to say you even found the right abstraction after two instances of repetition? I say copy-paste as much as you want until it causes bugs, and only abstract to solve bugs. And in doing so, ensure that you’ve reduced the developer overheard.</p>\n<h2>Location, location, location</h2>","frontmatter":{"title":"React best practices","date":"June 06, 2019","description":"The DEFINITIVE guide to React and programming best practices."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019-06-06-react-best-practices/","previous":{"fields":{"slug":"/2019-06-05-hello-world/"},"frontmatter":{"title":"Hello World"}},"next":null}}