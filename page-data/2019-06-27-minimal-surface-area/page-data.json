{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019-06-27-minimal-surface-area/","webpackCompilationHash":"c459c9c8df928d92a739","result":{"data":{"site":{"siteMetadata":{"title":"brain's base","author":"Jeff Chheng"}},"markdownRemark":{"id":"12e159c9-4ac1-58ed-8507-bb63c0f57be2","excerpt":"If you haven't seen it already, I highly recommend watching Sebastian Markbåge's talk on Minimal API Surface Area. Or if you prefer, you can also read the…","html":"<p>If you haven't seen it already, I highly recommend watching <a href=\"https://www.youtube.com/watch?v=4anAwXYqLG8\">Sebastian Markbåge's talk on Minimal API Surface Area</a>. Or if you prefer, <a href=\"https://2014.jsconf.eu/speakers/sebastian-markbage-minimal-api-surface-area-learning-patterns-instead-of-frameworks.html#transcript\">you can also read the transcript</a>.</p>\n<p>His suggestion is to put JS on a diet.</p>\n<ol>\n<li>Slow moving standards. Use polyfills instead of libs.</li>\n<li>Spaghetti code. Write explicit, repetitive code.</li>\n<li>Never add sugar. Only abstract to solve bugs.</li>\n<li>Burn as much as you add.</li>\n</ol>\n<h1>1. Follow the standards committee</h1>\n<p>You should learn patterns instead of frameworks. We're not in the wild west of JavaScript anymore. The standards committee is moving at a decent pace, and they're committed to <a href=\"https://2ality.com/2014/12/one-javascript.html\">One JavaScript</a>. As such, the language now contains everything you need to write effective web apps or servers.</p>\n<p>Back in the day (ES4), JS was missing a lot of functionality, so libraries had to implement their own version: <code class=\"language-text\">jQuery.each([], fn)</code>, <code class=\"language-text\">_.forEach([], fn)</code>, or maybe your company had their own utility function. But now, these functions exist in the language, and if you need to target older browsers, there are build tools to transpile and/or polyfill it.</p>\n<p>Think about the massive API surface area of JS itself, and when you add a library on top of that, you're asking a lot of every dev you onboard. Imagine having to learn a new library to function (pun intended).</p>\n<p>Using the standards also avoids bikeshedding. There's only one way to do something. If the native implementation has bugs or perf issues, you can always monkeypatch it. That's what makes JS great.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">_<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">pick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// lodash or underscore? another lib?</span>\n<span class=\"token comment\">// vs.</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>2. Write explicit, repetitive code. DRY is out, WET is in.</h1>\n<p>I think everyone at one point tried to be a little too clever in their abstraction. At first, it worked like a charm. You just call this function with one or two args, and it does the thing. No bugs, no edge cases, handles undefined/null perfectly. But then you find another use case that's <em>almost</em> like this one, so you have to add onto it. Repeat this process a few times and you have a rat king of an abstraction (don't Google this, it's a collection of rats whose tails are intertwined and bound together).</p>\n<p>And each change you make risks adding bugs as well. So don't do this. Let that code repeat as much as you need until it causes bugs. Because until that point, it's not hurting anyone, and you can't be sure you've found a generalized solution yet. DRY it out, WET is in.</p>\n<p>The worst case of over-abstraction I've seen in an enterprise codebase this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getResourceType</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> data<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>resourceType<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Basic property access is just part of being a dev. There's no need to add the mental overhead of this getter function, when you could've just done <code class=\"language-text\">data?.resourceType</code> directly.</p>\n<p>I also see a lot of overabstraction when it comes to tabular data. People love </p>\n<h1>3. Only abstract to solve bugs</h1>\n<p>This brings me to the next point of only abstracting to solve bugs. If a code is repeating a bunch of times, why fix it? It's not hurting anyone, and the risk that your generalization doesn't actually solve all cases is pretty high. </p>\n<h1>4. Rethink the stack and purge, i.e., remove features when you can</h1>","frontmatter":{"title":"Minimal API Surface Area - Learning Patterns Instead of Frameworks","date":null,"description":"Your utility functions and libraries need a diet."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019-06-27-minimal-surface-area/","previous":{"fields":{"slug":"/2019-08-02-usestatesafely/"},"frontmatter":{"title":"Introducing useStateSafely"}},"next":null}}}